package misclassifiedExploitation;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

import mainPackage.Tuple;

import configuration.Global;

//import java.util.HashMap;

import weka.clusterers.SimpleKMeans;
import weka.core.Instances;

public class KMeans {

	//will contain the assignments of the misclassified tuples (which misclassified belongs to which cluster)
	int[] assignments;
	boolean centroidsExist = false;

	/**Runs the k-means algorithm in the misclassified data and returns the number of centroids we have defined.
	 * @param queryNumber
	 * @return centroids of the misclassified.
	 * @throws Exception
	 */
	public ArrayList<Tuple> getCentroids(int areas) throws Exception{
		ArrayList<Tuple> toReturn = new ArrayList<Tuple>();

		BufferedReader reader = new BufferedReader(new FileReader("miscl.arff"));
		Instances data = new Instances(reader);

		//if the number of the misclassified samples is less than the number of clusters then return those
		//misclassified samples as centers
		if(data.numInstances()<=areas){
			for(int i=0; i<data.numInstances(); i++){
				Object[] attrValues = new Object[Global.attributes.size()];
				for(int j=0; j<attrValues.length; j++){
					attrValues[j] = data.instance(i).value(j);
				}
				Tuple t = new Tuple(null, attrValues);
				toReturn.add(t);
			}
			return toReturn;
		}

		SimpleKMeans k = new SimpleKMeans();
		k.setNumClusters(areas);
		k.setPreserveInstancesOrder(true);
		centroidsExist = true;

		k.buildClusterer(data);

		//this array holds the assignments of each misclassified sample to a cluster
		assignments = k.getAssignments();

		//adds the centroids of the clusters in an arraylist and returns them
		Instances centroids = k.getClusterCentroids();
		for (int i=0; i<centroids.numInstances(); i++) {
			Object[] attrValues = new Object[Global.attributes.size()];
			for(int j=0; j<attrValues.length; j++){
				attrValues[j] = centroids.instance(i).value(j);
			}
			Tuple t = new Tuple(null, attrValues);
			toReturn.add(t); 
		}
		return toReturn;
	}

}
